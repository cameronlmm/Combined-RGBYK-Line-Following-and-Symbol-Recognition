// Include files for required libraries
#include <stdio.h>
#include <iostream>
#include "opencv2/core.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"


#include "opencv_aee.hpp"
#include "main.hpp"     // You can use this file for declaring defined values and functions
#include "pi2c.h"

using namespace cv;
using namespace std;

Pi2c car(0x22); // Configure the I2C interface to the Car as a global variable

// function to get the contour with the largest area
int getLargestContourID(vector <vector<Point>> contours) {
    double maxArea = 0;
    int largestContourID = 0;
    for (int i=0; i<contours.size(); i++) {
        double newArea = contourArea(contours.at(i));
        if (newArea > maxArea) {
            maxArea = newArea;
            largestContourID = i;
        }
    }
    return largestContourID;
}

// function to get the contour with the second largest area
int getSecContourID(vector <vector<Point>> contours) {
    double maxArea = 0;
    double secArea = 0;
    int largestContourID = 0;
    int secAreaContourID = 0;
    for (int i=0; i<contours.size(); i++) {
        double newArea = contourArea(contours.at(i));
        if (newArea > maxArea) {
            secArea = maxArea;
            secAreaContourID = largestContourID;
            maxArea = newArea;
            largestContourID = i;
        }
        else if (newArea > secArea) {
            secArea = newArea;
            secAreaContourID = i;
        }
    }
    return secAreaContourID;
}


int main() {
    // start raspberry pi camera with dimensions defined
    setupCamera(320,240);

    int colour = 1;

    while (true) {
        Mat frame, hsv, mask;

        // capture camera feed frame
        while (frame.empty())
            frame = captureFrame();

        // converting camera feed from BGR to HSV
        cvtColor(frame, hsv, COLOR_BGR2HSV);

        Scalar lowerColour;
        Scalar upperColour;

        if (colour == 1) {
            lowerColour = Scalar(0, 22, 0);
            upperColour = Scalar(179, 255, 67);
        }
        else if (colour == 2) {
            lowerColour = Scalar(170, 100, 20);
            upperColour = Scalar(179, 255, 255);
        }
        else if (colour == 3) {
            lowerColour = Scalar(40, 100, 20);
            upperColour = Scalar(85, 255, 255);
        }
        else if (colour == 4) {
            lowerColour = Scalar(90, 100, 20);
            upperColour = Scalar(125, 255, 255);
        }
        else if (colour == 5) {
            lowerColour = Scalar(20, 100, 100);
            upperColour = Scalar(30, 255, 255);
        }

        inRange(hsv, lowerColour, upperColour, mask);

        Mat croppedFeed;
        croppedFeed = mask(Rect(0,0,319,1)); // cropping the masked feed so the camera only sees the first row

        Mat hsvCircle, hsvStar, hsvTriangle, hsvUmbrella;
        Mat circleMask, starMask, triangleMask, umbrellaMask;
        Mat maskSymbolFeed;

        // reading in all the symbol images
        Mat circle = imread("Circle (Red Line).png");
        Mat star = imread("Star (Green Line).png");
        Mat triangle = imread("Triangle (Blue Line).png");
        Mat umbrella = imread("Umbrella (Yellow Line).png");

        // converting symbol images in BGR to HSV
        cvtColor(circle, hsvCircle, COLOR_BGR2HSV);
        cvtColor(star, hsvStar, COLOR_BGR2HSV);
        cvtColor(triangle, hsvTriangle, COLOR_BGR2HSV);
        cvtColor(umbrella, hsvUmbrella, COLOR_BGR2HSV);

        // defining range of pink in HSV
        Scalar lower_pink(122, 9, 0);
        Scalar upper_pink(179, 175, 200);

        // masking the pink colour in the images (pink turns to white, everything else to black)
        inRange(hsvCircle, lower_pink, upper_pink, circleMask);
        inRange(hsvStar, lower_pink, upper_pink, starMask);
        inRange(hsvTriangle, lower_pink, upper_pink, triangleMask);
        inRange(hsvUmbrella, lower_pink, upper_pink, umbrellaMask);

        // masking pink in the camera feed
        inRange(hsv, lower_pink, upper_pink, maskSymbolFeed);

        Mat dilated;
        vector< vector<Point> > contours;
        vector<Vec4i> hierarchy;

        // finding the initial contours
        int thresh = 100;
        Canny(maskSymbolFeed, dilated, thresh, thresh*2, 3);
        findContours(dilated,   contours,   hierarchy,  RETR_TREE,CHAIN_APPROX_SIMPLE, Point(0,0));

        if (contours.empty() == false) { // if statement to negate error when camera doesn't find contours

            Mat drawing = Mat::zeros(dilated.size(), CV_8UC3);
            for (int i=0; i < contours.size(); i++) {
                drawContours(drawing, contours, i, Scalar(0,0,255), 2, LINE_8, noArray(), 0, Point()); // drawing the initial contours
            }

            int largestID = getLargestContourID(contours);
            int secID = getSecContourID(contours);

            // use of bounding rectangles to identify which contour is the square
            Rect box1 = boundingRect(contours[largestID]);
            Rect box2 = boundingRect(contours[secID]);

            vector<Point> squareContour;

            // if statement used to simplify contours depending on if the square contour has a smaller or larger area than the shape contour
            if (box1.area() > box2.area()) {
                approxPolyDP(contours.at(largestID), squareContour, arcLength(contours.at(largestID), true) * 0.02, true); // simplify contours
            }
            else {
                approxPolyDP(contours.at(secID), squareContour, arcLength(contours.at(secID), true) * 0.02, true);
            }

            Mat transformed = transformPerspective(squareContour, frame, 350, 350); // transforming the perspective of the symbol seen by the camera to birds eye view
            Mat hsvSymbol;
            Mat symbolMask;

            float compareCircle, compareStar, compareTriangle, compareUmbrella;

            if (transformed.empty() == false) // if statement to negate error when the 'transformed' matrix is empty, i.e. when camera doesn't see a symbol
            {
                cvtColor(transformed, hsvSymbol, COLOR_BGR2HSV); // convert the transformed image from BGR to HSV

                // masking the pink in the transformed image
                inRange(hsvSymbol, lower_pink, upper_pink, symbolMask);

                imshow("Transformed", symbolMask); // display the masked transformed image

                // functions to generate a percentage comparison between the transformed image feed and each symbol image file (both masked)
                compareCircle = compareImages(symbolMask, circleMask);
                compareStar = compareImages(symbolMask, starMask);
                compareTriangle = compareImages(symbolMask, triangleMask);
                compareUmbrella = compareImages(symbolMask, umbrellaMask);

            }

            int nonZero = 0;
	    
            // if statement to switch colour to follow depending on which comparison value is greatest
            if (compareCircle > compareStar && compareCircle > compareTriangle && compareCircle > compareUmbrella) {
                colour = 2;
                nonZero = countNonZero(croppedFeed); // counting number of non-zero pixels in the camera feed
                if (nonZero = 0) { // if statement which switches the colour to follow back to black when the camera no longer sees any of the colour with use of non-zero pixels
                    colour = 1; // switches colour back to black
                }
            }
            else if (compareStar > compareCircle && compareStar > compareTriangle && compareStar > compareUmbrella) {
                colour = 3;
                nonZero = countNonZero(croppedFeed);
                if (nonZero = 0) {
                    colour = 1;
                }
            }
            else if (compareTriangle > compareCircle && compareTriangle > compareStar && compareTriangle > compareUmbrella) {
                colour = 4;
                nonZero = countNonZero(croppedFeed);
                if (nonZero = 0) {
                    colour = 1;
                }
            }
            else if (compareUmbrella > compareCircle && compareUmbrella > compareStar && compareUmbrella > compareTriangle) {
                colour = 5;
                nonZero = countNonZero(croppedFeed);
                if (nonZero = 0) {
                    colour = 1;
                }
            }
            else {
                colour = 1;
            }
        }
            float sumOfWeights = 0;
            float weightedSum = 0;

            // calculating the weighted average
            for (int col=0; col<croppedFeed.cols; ++col) {
                uchar pixel = croppedFeed.at<uchar>(0,col);
                float X = col - 160; // 320 columns so need to subtract 160 to find centre
                float weight = static_cast<float>(pixel);
                sumOfWeights += weight;
                weightedSum += static_cast<float>(pixel) * static_cast<float>(X);
            }
            int weightedAverage = weightedSum / sumOfWeights;

            char Xpk[2]; // defining a charred array to send weighted average over I2C to arduino IDE
            Xpk[0] = (weightedAverage >> 8) & 0xFF;
            Xpk[1] = weightedAverage & 0xFF;
            car.i2cWrite(Xpk, 2);

            imshow("Original Feed", frame);
            imshow("Masked Feed", mask);

            int key = waitKey(1);   // Wait 1ms for a keypress (required to update windows)

            key = (key==255) ? -1 : key;    // Check if the ESC key has been pressed
            if (key == 27) {
            break;
            }

    }

    closeCV();

    return 0;

}
